from faker import Faker

fake = Faker()

class BaseContact:
    def __init__(self, first_name, last_name, phone, email):
        self.first_name = first_name
        self.last_name = last_name
        self.phone = phone
        self.email = email

    def contact(self):
        print(f"Wybieram numer {self.phone} i dzwonię do {self.first_name} {self.last_name}.")

    @property
    def label_length(self):
        return len(f"{self.first_name} {self.last_name}")

class BusinessContact(BaseContact):
    def __init__(self, first_name, last_name, phone, email, position, company, work_phone):
        super().__init__(first_name, last_name, phone, email)
        self.position = position
        self.company = company
        self.work_phone = work_phone

    def contact(self):
        print(f"Wybieram numer {self.work_phone} i dzwonię do {self.first_name} {self.last_name}.")

def create_contacts(contact_type, quantity):
    contacts = []
    for _ in range(quantity):
        if contact_type == "BaseContact":
            contact = BaseContact(fake.first_name(), fake.last_name(), fake.phone_number(), fake.email())
        elif contact_type == "BusinessContact":
            contact = BusinessContact(fake.first_name(), fake.last_name(), fake.phone_number(), fake.email(), fake.job(), fake.company(), fake.phone_number())
        else:
            raise ValueError("Invalid contact type.")
        contacts.append(contact)
    return contacts

# Przykład użycia
contacts = create_contacts("BaseContact", 5)
for contact in contacts:
    print(f"{contact.first_name} {contact.last_name}, {contact.email}")
print("\n")

# Sortowanie listy wizytówek
sorted_by_first_name = sorted(contacts, key=lambda contact: contact.first_name)
sorted_by_last_name = sorted(contacts, key=lambda contact: contact.last_name)
sorted_by_email = sorted(contacts, key=lambda contact: contact.email)

# Wyświetlanie posortowanych list
print("Sortowanie według imienia:")
for contact in sorted_by_first_name:
    print(f"{contact.first_name} {contact.last_name}, {contact.email}")

print("\nSortowanie według nazwiska:")
for contact in sorted_by_last_name:
    print(f"{contact.first_name} {contact.last_name}, {contact.email}")

print("\nSortowanie według adresu e-mail:")
for contact in sorted_by_email:
    print(f"{contact.first_name} {contact.last_name}, {contact.email}")

#test wybierania numeru
business_contacts = create_contacts("BusinessContact", 2)
for contact in business_contacts:
    print(f"{contact.first_name} {contact.last_name}, {contact.email}")
    contact.contact()

